CREATE TABLE ORDERS
(
	ONUM INT PRIMARY KEY,
	CNUM INT,
	SNUM CHAR(4),
	ORDER_UNIT INT NOT NULL,
	AMT FLOAT,
	ORDER_DATE DATE,
	STATUSS VARCHAR(25) DEFAULT 'ORDER_PLACED',
	BATCH_NO VARCHAR(25),
    CONSTRAINT FK_CUST_ORDERS FOREIGN KEY (CNUM)
    REFERENCES CUST (CNUM),
    UNIQUE (CNUM, ORDER_DATE)
);

DELIMITER //
CREATE PROCEDURE CHECK_AVAILABILITY(ODATE DATE)
BEGIN
	DECLARE PRESENT INT;
    DECLARE REQUIRED INT;
    SELECT SUM(UNITS) INTO PRESENT FROM PROD;
    SELECT SUM(ORDER_UNIT) INTO REQUIRED FROM ORDERS;
    IF(PRESENT-REQUIRED)<0 THEN
		CALL PRODUCTION_REQUEST(ODATE);
    END IF;
END; //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE OLD_ORDER_ENTRY(CNO INT, ORDER_UNIT INT,  ORDER_DATE DATE, STATUSS VARCHAR(25), BATCH_NO VARCHAR(25))
BEGIN
	DECLARE ONUM INT;
	DECLARE AMT FLOAT;
    DECLARE SNO CHAR(4);
	SET ONUM=FLOOR(RAND()*(100000-0+1))+0;  
	SET AMT=500*ORDER_UNIT;
    SELECT SNUM INTO SNO FROM CUST WHERE CNUM=CNO;
	INSERT INTO  ORDERS VALUES(ONUM,CNO,SNO,ORDER_UNIT,AMT,ORDER_DATE,STATUSS, BATCH_NO);
    INSERT INTO INCM_EXP_TALLY VALUES ('I', AMT, ORDER_DATE, CONCAT(ONUM, ' INCOME'));
    CALL CHECK_AVAILABILITY(ORDER_DATE);
END; //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE NEW_ORDER_ENTRY(CNO INT, ORDER_UNIT INT,  ORDER_DATE DATE)
BEGIN
	DECLARE ONUM INT;
	DECLARE AMT FLOAT;
    DECLARE SNO CHAR(4);
	SET ONUM=FLOOR(RAND()*(100000-0+1))+0;  
	SET AMT=500*ORDER_UNIT;
    SELECT SNUM INTO SNO FROM CUST WHERE CNUM=CNO;
	INSERT INTO ORDERS (ONUM, CNUM, SNUM, ORDER_UNIT, AMT, ORDER_DATE)
    VALUES(ONUM,CNO,SNO,ORDER_UNIT,AMT,ORDER_DATE);
    INSERT INTO EMP_AUDIT VALUES (NULL, SNO, USER(), SYSDATE(), CONCAT('ORDER NO: ',ONUM, ' PLACED FOR CUST NO: ',CNO, ' BY EMP NO: ', SNO));
    INSERT INTO INCM_EXP_TALLY VALUES ('I', AMT, ORDER_DATE, CONCAT(ONUM, ' INCOME'));
    CALL CHECK_AVAILABILITY(ORDER_DATE);
END; //
DELIMITER ;

CREATE TABLE INCM_EXP_TALLY
(
	HEAD CHAR(1)
    CONSTRAINT CH_INCM_EXP_TALLY_HEAD CHECK (HEAD IN ('I', 'E', 'P', 'L')),
    AMT FLOAT,
    ENTRY_DATE DATETIME,
    REMARK VARCHAR(200) 
);

CREATE TABLE PROD
(
	BATCH_NO INT PRIMARY KEY AUTO_INCREMENT,
	PRO_DATE DATE,
    UNITS INT DEFAULT 500
);

SET @PRO_UNIT=500;
SET @RAW_COST=140;
SET @BASIC_PROD_COST=75;

DELIMITER //
CREATE PROCEDURE PRODUCTION_REQUEST(PDATE DATE)
BEGIN
	DECLARE PROD_COST FLOAT;
    INSERT INTO PROD (PRO_DATE) VALUES (DATE(SYSDATE()));
    SET PROD_COST = @PRO_UNIT*(@BASIC_PROD_COST+@RAW_COST);
    INSERT INTO EMP_AUDIT VALUES (NULL, '0', USER(), SYSDATE(), CONCAT(' PRODUCTION REQUEST PLACED SUCESSFULLY'));
    INSERT INTO INCM_EXP_TALLY VALUES ('E', PROD_COST, PDATE, 'PRODUCTION COST');
END; //
DELIMITER ;

CALL PRODUCTION_REQUEST('2020-09-01');

CALL OLD_ORDER_ENTRY(3,250,'2020-09-01','DELIVERED','1');
CALL OLD_ORDER_ENTRY(1,500,'2020-11-15','DELIVERED','1,2');
CALL OLD_ORDER_ENTRY(3,450,'2020-12-01','DELIVERED','2,3');
CALL OLD_ORDER_ENTRY(7,700,'2021-01-01','DELIVERED','3,4');
CALL OLD_ORDER_ENTRY(8,300,'2021-03-05','DELIVERED','4,5');
CALL OLD_ORDER_ENTRY(2,750,'2021-04-05','DELIVERED','5,6');
CALL OLD_ORDER_ENTRY(1,800,'2021-06-30','DELIVERED','6,7,8');
CALL OLD_ORDER_ENTRY(6,500,'2021-09-15','DELIVERED','8,9');
CALL OLD_ORDER_ENTRY(4,250,'2021-11-15','DELIVERED','9');
CALL OLD_ORDER_ENTRY(2,300,'2021-03-12','DELIVERED','10');
CALL OLD_ORDER_ENTRY(5,500,'2022-05-24','IN_TRANSIT','10,11');
CALL OLD_ORDER_ENTRY(4,750,'2022-06-01','IN_TRANSIT','11,12');
CALL OLD_ORDER_ENTRY(3,900,'2022-06-07','PROCESSING', NULL);
CALL NEW_ORDER_ENTRY(1,600, '2022-06-12');
CALL NEW_ORDER_ENTRY(6,800,'2022-06-15');

DELIMITER //
CREATE PROCEDURE ORDER_STATUS_UPDATE(ENO CHAR(4), ONO INT, STAT VARCHAR(25), BATCH VARCHAR(25))
BEGIN
	UPDATE ORDERS SET STATUSS=STAT, BATCH_NO=BATCH WHERE ONUM=ONO;
    IF(LENGTH(STAT) = 0) THEN
		INSERT INTO EMP_AUDIT VALUES (NULL, ENO, USER(), SYSDATE(), CONCAT('ORDER NO: ',ONO, ' NOT FOUND FOR UPDATE'));
	ELSE
		INSERT INTO EMP_AUDIT VALUES (NULL, ENO, USER(), SYSDATE(), CONCAT('ORDER NO: ',ONO, ' STATUS UPDATED TO ', STAT));
	END IF;
END; //
DELIMITER ;
